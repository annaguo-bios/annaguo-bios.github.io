<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://annaguo-bios.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://annaguo-bios.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-12T21:24:32+00:00</updated><id>https://annaguo-bios.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Version control with Git and GitHub</title><link href="https://annaguo-bios.github.io/posts/2025-03-12-git/" rel="alternate" type="text/html" title="Version control with Git and GitHub"/><published>2025-03-11T00:00:00+00:00</published><updated>2025-03-11T00:00:00+00:00</updated><id>https://annaguo-bios.github.io/posts/git</id><content type="html" xml:base="https://annaguo-bios.github.io/posts/2025-03-12-git/"><![CDATA[<p><em>This post is a summary note based on what I learned on DATA 550: Data Science Toolkit.</em> <em>I want to recap what I’ve learned but also refine and expand on it, turning it into a clear</em> <em>actionable workflow that I can rely on for future projects. It’s about creating a practical</em> <em>guide that I—and hopefully others—can follow with ease.</em></p> <h3 id="step-1-setting-up-git">Step 1. Setting Up Git</h3> <h4 id="install-git">Install Git</h4> <p>Git is a version control system that helps track changes in your code and collaborate with others. To start, you need to install it on your system.</p> <ul> <li><strong>Linux</strong>: <code class="language-plaintext highlighter-rouge">sudo apt install git</code></li> <li><strong>Mac</strong>: <code class="language-plaintext highlighter-rouge">brew install git</code></li> <li><strong>Windows</strong>: Download from <a href="https://git-scm.com">git-scm.com</a></li> </ul> <h4 id="checking-if-git-is-installed">Checking If Git is Installed</h4> <p>To confirm Git is installed, run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git <span class="nt">--version</span>
</code></pre></div></div> <h4 id="configure-git">Configure Git</h4> <p>After installing Git, you need to set up your user identity so that Git can properly attribute changes to you</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> user.name <span class="s2">"Your Name"</span>
git config <span class="nt">--global</span> user.email <span class="s2">"your-email@example.com"</span>
</code></pre></div></div> <h3 id="step-2-initializing-a-git-repository">Step 2. Initializing a Git Repository</h3> <p>A Git repository (repo) is where all version history for a project is stored.</p> <h4 id="create-a-new-repository">Create a New Repository</h4> <p>Navigate to the project folder (on your local computer) and initialize a Git repository:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div> <p>This creates a hidden <code class="language-plaintext highlighter-rouge">.git</code> folder that Git uses to track changes.</p> <h4 id="track-and-save-changes">Track and Save Changes</h4> <p>To start tracking files, add them to Git and make an initial commit:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Initial commit"</span>
</code></pre></div></div> <hr/> <h3 id="step-3-tracking-changes-and-committing">Step 3. Tracking Changes and Committing</h3> <h4 id="add-and-commit-files">Add and Commit Files</h4> <p>The <code class="language-plaintext highlighter-rouge">add</code> command tells git which file you want to track on. <code class="language-plaintext highlighter-rouge">git add .</code> will track all the files in the current directory. The <code class="language-plaintext highlighter-rouge">commit</code> command then takes a snapshot on the added files, to track the current changes.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add filename.txt  <span class="c"># Add specific file</span>
git add <span class="nb">.</span>             <span class="c"># Add all changes</span>
git commit <span class="nt">-m</span> <span class="s2">"Commit message"</span>
</code></pre></div></div> <h4 id="check-file-status">Check File Status</h4> <p>Check which files have been modified:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git status
</code></pre></div></div> <h4 id="viewing-commit-history">Viewing Commit History</h4> <p>To see previous commits:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log <span class="nt">--oneline</span> <span class="nt">--graph</span> <span class="nt">--decorate</span> <span class="nt">--all</span>
</code></pre></div></div> <hr/> <h3 id="step-4-moving-this-workflow-online-with-github">Step 4. Moving this workflow online with GitHub</h3> <p>GitHub is a platform that lets you store Git repositories online and collaborate with others.</p> <h4 id="generate-ssh-key-for-authentication">Generate SSH Key (for authentication)</h4> <p>We will need SSH keys to build secure connections between our local computer and GitHub. The following command generates the key pair.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-o</span> <span class="nt">-t</span> rsa
</code></pre></div></div> <p>After generating an SSH key, you need to add it to GitHub to connect your local machine with GitHub.</p> <p>Here’s how:</p> <ol> <li> <p><strong>Copy Your SSH Key</strong> Run the following command to copy your public key:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> ~/.ssh/id_rsa.pub
</code></pre></div> </div> <p>This will display the key. Copy the entire output.</p> </li> <li> <p><strong>Add the Key to GitHub</strong></p> <ul> <li>Go to <strong>GitHub → Settings → SSH and GPG Keys</strong></li> <li>Click <strong>New SSH Key</strong></li> <li>Paste your copied key into the provided box</li> <li>Click <strong>Add SSH Key</strong></li> </ul> </li> <li> <p><strong>Verify the Connection</strong> Run the following command to check if GitHub recognizes your key:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-T</span> git@github.com
</code></pre></div> </div> <p>If successful, you should see a message like:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hi your-username! You<span class="s1">'ve successfully authenticated, but GitHub does not provide shell access.
</span></code></pre></div> </div> </li> </ol> <p>You may see messages like “The authenticity of host ‘github.com’ can’t be established” while trying to connect to GitHub via SSH, it means that your SSH client (such as OpenSSH) doesn’t recognize the host key for GitHub’s server.</p> <p>This message typically appears the first time you attempt to connect to a remote server using SSH. To proceed, you typically have the option to accept the authenticity of the host by typing “yes” when prompted.</p> <h4 id="connect-local-repository-to-github">Connect Local Repository to GitHub</h4> <ol> <li> <p>Create a repository on GitHub. It’s like your project’s home base. This is where all your Git history, changes, and progress will live, making it easy to keep track of everything as you work. Think of it as your project’s storybook, documenting every step along the way.</p> </li> <li> <p>Connect your local repository to the one you just created on GitHub:</p> </li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote add origin https://github.com/your-username/repo-name.git
</code></pre></div></div> <p>This ties your local project to the remote repository, so you can easily push your changes and keep everything in sync. Think of it as building a bridge between your computer and GitHub.</p> <ol> <li>Push code to GitHub:</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch main  <span class="c"># Rename to main if needed</span>
git push origin main
</code></pre></div></div> <hr/> <h3 id="step-5-pulling-and-pushing-changes">Step 5. Pulling and Pushing Changes</h3> <h4 id="fetch-latest-updates-from-github">Fetch Latest Updates from GitHub</h4> <p>If you are working with a team, you need to pull the latest changes before making new edits:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git pull origin main
</code></pre></div></div> <h4 id="push-new-changes-to-github">Push New Changes to GitHub</h4> <p>After making changes locally, push them to the remote repository:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin main
</code></pre></div></div> <hr/> <h3 id="step-6-branching-and-merging">Step 6. Branching and Merging</h3> <p>Branches allow you to work on new features without affecting the main codebase.</p> <h4 id="create-and-switch-branches">Create and Switch Branches</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch new-feature  <span class="c"># Create a new branch</span>
git checkout new-feature  <span class="c"># Switch to it</span>
</code></pre></div></div> <h4 id="merge-branches">Merge Branches</h4> <p>Once a feature is complete, merge it back into the main branch:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout main
git merge new-feature
</code></pre></div></div> <h4 id="delete-a-branch">Delete a Branch</h4> <p>After merging, you can delete the feature branch:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch <span class="nt">-d</span> new-feature
</code></pre></div></div> <hr/> <h3 id="step-7-undoing-changes">Step 7. Undoing Changes</h3> <h4 id="undo-last-commit-keep-changes">Undo Last Commit (Keep Changes)</h4> <p>Revert the last commit but keep the changes staged:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset <span class="nt">--soft</span> HEAD~1
</code></pre></div></div> <h4 id="undo-last-commit-discard-changes">Undo Last Commit (Discard Changes)</h4> <p>Revert the last commit and remove all changes:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset <span class="nt">--hard</span> HEAD~1
</code></pre></div></div> <h4 id="discard-changes-in-a-file">Discard Changes in a File</h4> <p>Revert a specific file to the last committed version:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout <span class="nt">--</span> filename.txt
</code></pre></div></div> <hr/> <h4 id="force-remove-file-from-tracking">Force Remove File from Tracking</h4> <p>To stop tracking a file that was previously added to Git, without deleting it from your local disk.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git <span class="nb">rm</span> <span class="nt">--cached</span> filename.txt
</code></pre></div></div> <h3 id="step-8-working-with-remote-repositories">Step 8. Working with Remote Repositories</h3> <h4 id="cloning-a-repository">Cloning a Repository</h4> <p>Copy an existing repository from GitHub to your local machine:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/username/repo-name.git
</code></pre></div></div> <h4 id="forking-a-repository">Forking a Repository</h4> <p>Forking allows you to make changes to someone else’s repository without affecting the original.</p> <ol> <li> <p>Click <strong>Fork</strong> on the repository page.</p> </li> <li> <p>Clone your fork:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/your-username/forked-repo.git
</code></pre></div> </div> </li> </ol> <h4 id="submitting-a-pull-request">Submitting a Pull Request</h4> <p>A pull request (PR) lets others review and merge your changes.</p> <ol> <li> <p>Push changes:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push origin branch-name
</code></pre></div> </div> </li> <li> <p>On GitHub, go to <strong>Pull Requests</strong> and click <strong>New Pull Request</strong>.</p> </li> </ol> <h4 id="merging-a-pull-request">Merging a Pull Request</h4> <p>Once approved, you can merge the PR into the main branch.</p> <h4 id="syncing-with-upstream-repository">Syncing with Upstream Repository</h4> <p>Keep your fork updated with changes from the original repository:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote add upstream https://github.com/original-repo.git
git fetch upstream
git merge upstream/main
</code></pre></div></div> <h3 id="step-9-managing-large-files-and-ignoring-files">Step 9. Managing Large Files and Ignoring Files</h3> <h4 id="use-gitignore-to-ignore-files">Use .gitignore to Ignore Files</h4> <p>Specify files and folders that should not be tracked by Git. Create a <code class="language-plaintext highlighter-rouge">.gitignore</code> file and add:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>output/*.rds
output/*.png
</code></pre></div></div> <h4 id="track-large-files-with-git-lfs">Track Large Files with Git LFS</h4> <p>Git LFS (Large File Storage) helps manage large files efficiently:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git lfs track <span class="s2">"*.dta"</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="code"/><summary type="html"><![CDATA[quick start on Git and GitHub]]></summary></entry><entry><title type="html">Make an R package</title><link href="https://annaguo-bios.github.io/posts/2024-03-25-make-rpackage/" rel="alternate" type="text/html" title="Make an R package"/><published>2024-03-25T13:56:00+00:00</published><updated>2024-03-25T13:56:00+00:00</updated><id>https://annaguo-bios.github.io/posts/make-rpackage</id><content type="html" xml:base="https://annaguo-bios.github.io/posts/2024-03-25-make-rpackage/"><![CDATA[<blockquote> <p>This is more like a summary note of the two tutorials listed in the references section.</p> </blockquote> <ul> <li><a href="#step-0-packages-required">Step 0: Packages required</a></li> <li><a href="#step-1-create-your-package-directory">Step 1: Create your package directory</a></li> <li><a href="#step-2-create-a-function">Step 2: Create a function</a></li> <li><a href="#step-3-add-package-dependencies">Step 3: Add package dependencies</a></li> <li><a href="#step-4-add-documentation">Step 4: Add documentation</a></li> <li><a href="#step-4-optional-include-a-binary-data">Step 4 (optional): Include a binary data</a></li> <li><a href="#step-5-add-vignettes">Step 5: Add vignettes</a></li> <li><a href="#step-5-optional-add-a-github-readme-file">Step 5 (optional): Add a github readme file</a></li> <li><a href="#step-6-install-the-package">Step 6: Install the package</a></li> <li><a href="#step-7-test-the-package">Step 7: Test the package</a></li> <li><a href="#references">References</a></li> </ul> <p>This is a test for making R packages.</p> <h3 id="step-0-packages-required">Step 0: Packages required</h3> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="s2">"devtools"</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="s2">"roxygen2"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <h3 id="step-1-create-your-package-directory">Step 1: Create your package directory</h3> <p>Travel to the parent folder where you want to create your package. Then run the following code:</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">setwd</span><span class="p">(</span><span class="s2">"parent_directory"</span><span class="p">)</span><span class="w">
</span><span class="n">create</span><span class="p">(</span><span class="s2">"test.package"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <h3 id="step-2-create-a-function">Step 2: Create a function</h3> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># A function for cat lovers</span><span class="w">
</span><span class="c1"># Original code from https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/</span><span class="w">

</span><span class="n">cat_function</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">love</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">){</span><span class="w">
  </span><span class="k">if</span><span class="p">(</span><span class="n">love</span><span class="o">==</span><span class="kc">TRUE</span><span class="p">){</span><span class="w">
    </span><span class="n">print</span><span class="p">(</span><span class="s2">"I love cats!"</span><span class="p">)</span><span class="w">
    </span><span class="n">print</span><span class="p">(</span><span class="n">combn</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s1">'lover'</span><span class="p">,</span><span class="s1">'love'</span><span class="p">,</span><span class="s1">'cat'</span><span class="p">),</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">paste</span><span class="p">,</span><span class="w"> </span><span class="n">collapse</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">" "</span><span class="p">))</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">print</span><span class="p">(</span><span class="s2">"I am not a cool person."</span><span class="p">)</span><span class="w">
    </span><span class="n">print</span><span class="p">(</span><span class="n">combn</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s1">'not'</span><span class="p">,</span><span class="s1">'cool'</span><span class="p">),</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">paste</span><span class="p">,</span><span class="w"> </span><span class="n">collapse</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">" "</span><span class="p">))</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h3 id="step-3-add-package-dependencies">Step 3: Add package dependencies</h3> <p>Given that <code class="language-plaintext highlighter-rouge">cat_function()</code> uses the <code class="language-plaintext highlighter-rouge">combn()</code> function, we need to add the <code class="language-plaintext highlighter-rouge">itertools</code> package as a dependency. This can be achieved by add the following line to the <code class="language-plaintext highlighter-rouge">DESCRIPTION</code> file:</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Imports</span><span class="o">:</span><span class="w">
    </span><span class="n">itertools</span><span class="w">
</span></code></pre></div></div> <h3 id="step-4-add-documentation">Step 4: Add documentation</h3> <p>To document the function, add the following commented lines on top of the <code class="language-plaintext highlighter-rouge">cat_function()</code>.</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cd">#' A Cat Function</span><span class="w">
</span><span class="cd">#'</span><span class="w">
</span><span class="cd">#' This function allows you to express your love of cats.</span><span class="w">
</span><span class="cd">#' @param love Do you love cats? Defaults to TRUE.</span><span class="w">
</span><span class="cd">#' @keywords cats</span><span class="w">
</span><span class="cd">#' @export</span><span class="w">
</span><span class="cd">#' @examples</span><span class="w">
</span><span class="cd">#' cat_function()</span><span class="w">
</span><span class="cd">#' </span><span class="w">
</span><span class="n">cat_function</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">love</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">){</span><span class="w">
  </span><span class="k">if</span><span class="p">(</span><span class="n">love</span><span class="o">==</span><span class="kc">TRUE</span><span class="p">){</span><span class="w">
    </span><span class="n">print</span><span class="p">(</span><span class="s2">"I love cats!"</span><span class="p">)</span><span class="w">
    </span><span class="n">print</span><span class="p">(</span><span class="n">combn</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s1">'lover'</span><span class="p">,</span><span class="s1">'love'</span><span class="p">,</span><span class="s1">'cat'</span><span class="p">),</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">paste</span><span class="p">,</span><span class="w"> </span><span class="n">collapse</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">" "</span><span class="p">))</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">print</span><span class="p">(</span><span class="s2">"I am not a cool person."</span><span class="p">)</span><span class="w">
    </span><span class="n">print</span><span class="p">(</span><span class="n">combn</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s1">'not'</span><span class="p">,</span><span class="s1">'cool'</span><span class="p">),</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">paste</span><span class="p">,</span><span class="w"> </span><span class="n">collapse</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">" "</span><span class="p">))</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Once the documentation is added, run <code class="language-plaintext highlighter-rouge">devtools::document()</code> to generate the documentation files <code class="language-plaintext highlighter-rouge">cat_function.Rd</code>.</p> <h3 id="step-4-optional-include-a-binary-data">Step 4 (optional): Include a binary data</h3> <p>Sometimes we may like to include binary data in the package such that the data is readily available to the users once they installed the package. The data can be used for testing out the functions in the package or work as an example for the format of the data that the functions accept. To do this, we can create a R script say <code class="language-plaintext highlighter-rouge">data.R</code>, within wich we include the scripts used to generate the binary data. For example,</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">testdata</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">rnorm</span><span class="p">(</span><span class="m">10</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">),</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="n">rbinom</span><span class="p">(</span><span class="m">10</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">0.5</span><span class="p">))</span><span class="w">

</span><span class="n">devtools</span><span class="o">::</span><span class="n">use_data</span><span class="p">(</span><span class="n">testdata</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p>We first generate the binary data called <code class="language-plaintext highlighter-rouge">testdata</code>. Then we use the <code class="language-plaintext highlighter-rouge">use_data()</code> function to include the data in the package. This will create a <code class="language-plaintext highlighter-rouge">data</code> folder in the package directory and store the binary data called <code class="language-plaintext highlighter-rouge">testdata.rda</code> in the <code class="language-plaintext highlighter-rouge">data</code> folder.</p> <p>We may also want to make the script <code class="language-plaintext highlighter-rouge">data.R</code> accessible to the users. To do this, we can create a folder called <code class="language-plaintext highlighter-rouge">data-raw</code> in the package directory and store the <code class="language-plaintext highlighter-rouge">data.R</code> script in the <code class="language-plaintext highlighter-rouge">data-raw</code> folder. If we don’t want to include the <code class="language-plaintext highlighter-rouge">data.R</code> script when building the package, we can add the following line to the <code class="language-plaintext highlighter-rouge">.Rbuildignore</code> file:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>^data-raw<span class="err">$</span>
</code></pre></div></div> <p>It’s a good practice to document the binary data generated above such that when users explore the package with the data, they know what each variable mean. To document the data, we can create an R script named <code class="language-plaintext highlighter-rouge">document_data.R</code> under the <code class="language-plaintext highlighter-rouge">R</code> folder. Within the script, we can include the following</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cd">#' This is a toy dataset</span><span class="w">
</span><span class="cd">#'</span><span class="w">
</span><span class="cd">#'</span><span class="w">
</span><span class="cd">#' @format A data frame with 10 rows and 2 variables: x, y.</span><span class="w">
</span><span class="cd">#' \describe{</span><span class="w">
</span><span class="cd">#'  \item{x}{a variable that follows normal distribution}</span><span class="w">
</span><span class="cd">#'  \item{y}{a binary variable}</span><span class="w">
</span><span class="cd">#'  }</span><span class="w">

</span><span class="cd">#' @name testdata</span><span class="w">
</span><span class="cd">#' @docType data</span><span class="w">
</span><span class="cd">#' @keywords data</span><span class="w">
</span><span class="s2">"testdata"</span><span class="w">
</span></code></pre></div></div> <h3 id="step-5-add-vignettes">Step 5: Add vignettes</h3> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">usethis</span><span class="o">::</span><span class="n">use_vignette</span><span class="p">(</span><span class="s2">"introduction"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <h3 id="step-5-optional-add-a-github-readme-file">Step 5 (optional): Add a github readme file</h3> <p>Create a README.Rmd file in the package directory such that there will be a readme frontpage on github. An example yaml for the README.Rmd file is as follows:</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">---</span><span class="w">
</span><span class="n">title</span><span class="o">:</span><span class="w"> </span><span class="s2">"README"</span><span class="w">
</span><span class="n">author</span><span class="o">:</span><span class="w"> </span><span class="s2">"Anna Guo"</span><span class="w">
</span><span class="n">date</span><span class="o">:</span><span class="w"> </span><span class="s2">"`r Sys.Date()`"</span><span class="w">
</span><span class="n">output</span><span class="o">:</span><span class="w"> 
  </span><span class="n">github_document</span><span class="o">:</span><span class="w">
    </span><span class="n">toc</span><span class="o">:</span><span class="w"> </span><span class="n">true</span><span class="w">
    </span><span class="n">number_sections</span><span class="o">:</span><span class="w"> </span><span class="n">false</span><span class="w">
</span><span class="o">---</span><span class="w">
</span></code></pre></div></div> <p>The code below sets global options for the README.Rmd file.</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">knitr</span><span class="p">)</span><span class="w">
</span><span class="n">opts_chunk</span><span class="o">$</span><span class="n">set</span><span class="p">(</span><span class="n">warning</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="n">message</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="n">eval</span><span class="o">=</span><span class="nb">F</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <h3 id="step-6-check-and-install-the-package">Step 6: Check and install the package</h3> <p>Before building the package, it’s a good practice to check if there is any error or warning associated with the package. To do this, we can use the <code class="language-plaintext highlighter-rouge">check()</code> function</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">devtools</span><span class="o">::</span><span class="n">check</span><span class="p">()</span><span class="w">
</span></code></pre></div></div> <p>Upon addressing all the errors, we can install the package via</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">devtools</span><span class="o">::</span><span class="n">install</span><span class="p">()</span><span class="w">
</span></code></pre></div></div> <p><em>OR</em> make the package folder a git repository and install the package using the following code:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init <span class="c"># initialize a local git repository</span>
git add <span class="nb">.</span> <span class="c"># add all files to the repository</span>
git commit <span class="nt">-m</span> <span class="s2">"First commit"</span> <span class="c"># commit the changes</span>

<span class="c"># create an empty repository on GitHub and copy the ssh address</span>
<span class="c"># run this line of code to connect local git repo the remote GitHub repo</span>
git remote add origin git@github.com:&lt;github_username&gt;/&lt;github_repo_name&gt;.git <span class="c"># make change here!!!!!</span>
git push origin main <span class="c"># push local main to origin</span>
</code></pre></div></div> <p>Once the above is done. The package can be download via</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">devtools</span><span class="o">::</span><span class="n">install_github</span><span class="p">(</span><span class="s2">"&lt;github_username&gt;/&lt;github_repo_name&gt;"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <h3 id="step-7-test-the-package">Step 7: Test the package</h3> <p>This is a short tutorial on how to use the <code class="language-plaintext highlighter-rouge">test.package</code> package.</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">test.package</span><span class="p">)</span><span class="w">
</span><span class="n">cat_function</span><span class="p">(</span><span class="n">love</span><span class="o">=</span><span class="nb">T</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] "I love cats!"
## [1] "lover love" "lover cat"  "love cat"
</code></pre></div></div> <h3 id="references">References</h3> <ul> <li><a href="https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/">Writing an R package from scratch</a></li> <li><a href="https://tinyheero.github.io/jekyll/update/2015/07/26/making-your-first-R-package.html">Making your first R package</a></li> </ul>]]></content><author><name></name></author><category term="code"/><category term="code"/><summary type="html"><![CDATA[detailed implementation see GitHub repo test.package]]></summary></entry><entry><title type="html">Graphoid axioms and its proof</title><link href="https://annaguo-bios.github.io/posts/2024-01-25-graphoid-axiom/" rel="alternate" type="text/html" title="Graphoid axioms and its proof"/><published>2024-01-25T15:12:00+00:00</published><updated>2024-01-25T15:12:00+00:00</updated><id>https://annaguo-bios.github.io/posts/graphoid-axiom</id><content type="html" xml:base="https://annaguo-bios.github.io/posts/2024-01-25-graphoid-axiom/"><![CDATA[<blockquote> <p>Given three disjoint subsets \(X, Y, Z\), prove that the following relations hold:</p> </blockquote> <p><strong>Symmetry:</strong> \(X \perp Y \mid Z \implies Y \perp X \mid Z.\)</p> <details> <summary>Proof</summary> <br/> $$\begin{align} X \perp Y \mid Z &amp; \Leftrightarrow p(X, Y \mid Z)=p(X \mid Z) p(Y \mid Z) \\ &amp; \Leftrightarrow p(Y \mid Z) p(X \mid Z)=p(Y, X \mid Z) \\ &amp; \Leftrightarrow Y \perp X \mid Z \end{align}$$ </details> <p><br/></p> <p><br/></p> <p><strong>Decomposition:</strong> \(X \perp Y, W \mid Z \implies X \perp Y \mid Z \ \text{and} \ X \perp W \mid Z.\)</p> <details> <summary>Proof</summary> <br/> $$\begin{align} X \perp Y, W \mid Z &amp; \Leftrightarrow p(X, Y, W \mid Z)=p(X \mid Z) p(Y, W \mid Z) \\ &amp; \Leftrightarrow p(W \mid X, Y, Z) p(X, Y \mid Z)=p(X \mid Z) p(W \mid Y, Z) p(Y \mid Z) \\ &amp; \Rightarrow \sum_{w} p(W \mid X, Y, Z) p(X, Y \mid Z)=\sum_{w} p(W \mid Y, Z) p(X \mid Z) p(Y \mid Z) \\ &amp; \Leftrightarrow p(X, Y \mid Z)=p(X \mid Z) p(Y \mid Z) \\ &amp; \Leftrightarrow X \perp Y \mid Z \end{align}$$ similarly, $$\begin{align} X \perp Y, W \mid Z &amp; \Leftrightarrow p(X, Y, W \mid Z)=p(X \mid Z) p(Y, W \mid Z) \\ &amp; \Leftrightarrow p(Y \mid X, W, Z) p(X, W \mid Z)=p(X \mid Z) p(W \mid Z) p(Y \mid W, Z) \\ &amp;\Rightarrow \sum_{Y} p(Y \mid X, W, Z) p(X, W \mid Z)=\sum_{Y} p(X \mid Z) p(W \mid Z) p(Y \mid W, Z) \\ &amp;\Leftrightarrow p(X, W \mid Z)=p(X \mid Z) p(W \mid Z)\\ &amp; \Leftrightarrow X \perp W \mid Z \end{align}$$ </details> <p><br/></p> <p><br/></p> <p><strong>Weak union:</strong> \(X \perp Y, W \mid Z \implies X \perp Y \mid W, Z.\)</p> <details> <summary>Proof</summary> <br/> $$\begin{align} X \perp Y, W \mid Z &amp; \Leftrightarrow p(X, Y, W \mid Z)=p(X \mid Z) p(Y, W \mid Z) \\ &amp; \Leftrightarrow p(X, Y \mid W, Z) p(W \mid Z)=p(X \mid Z) p(Y \mid W, Z) p(W\mid Z) \\ &amp; \Leftrightarrow p(X, Y \mid W, Z)=p(X \mid Z) p(Y \mid W, Z) \\ \text{Based on (ii)} &amp; \Rightarrow p(X, Y \mid W, Z)=p(X \mid Z, W) p(Y \mid W, Z) \\ &amp; \Leftrightarrow X \perp Y \mid W, Z \end{align}$$ </details> <p><br/></p> <p><br/></p> <p><strong>Contraction:</strong> \(X \perp Y \mid Z \ \text{and} \ X \perp W \mid Y, Z \implies X \perp Y, W \mid Z.\)</p> <details> <summary>Proof</summary> <br/> $$\begin{align} X \perp Y \mid Z \text { \&amp; } X \perp W \mid Y, Z &amp; \Leftrightarrow p(X, Y \mid Z)=p(X \mid Z) p(Y \mid Z)\\ &amp; \text{ \&amp; } p(X, W \mid Y, Z)=p(X \mid Y, Z) p(W \mid Y, Z)\\ &amp; \begin{aligned} \Rightarrow p(X, Y, W \mid Z)&amp;=p(X, W \mid Y, Z) P(Y \mid Z)\\ &amp; =p(X \mid Y, Z) p(W \mid Y, Z) p(Y \mid Z)\\&amp; =p(X \mid Z) p(W, Y|Z) \end{aligned} \\ &amp; \Leftrightarrow X \perp W, Y \mid Z \end{align} $$ </details> <p><br/></p> <p><br/></p> <p><strong>Intersection:</strong> \(X \perp Y \mid W, Z \ \text{and} \ X \perp W \mid Y, Z \implies X \perp Y, W \mid Z.\) (Holds under strictly positive distributions)</p> <details> <summary>Proof</summary> <br/> $$ \begin{align} X \perp W \mid Y, Z &amp; \Leftrightarrow p(X, W \mid Y, Z)=p(X \mid Y, Z) p(W \mid Y, Z)\\ &amp; \begin{align} \Rightarrow p(X, W, Y \mid Z)&amp; =p(X \mid Y, Z) p(W \mid Y, Z) p(Y \mid Z)\\ &amp;=p(X\mid Y,Z)p(W,Y\mid Z) \overset{\Delta}{=} p(X\mid Z)p(W,Y\mid Z)\Rightarrow X \perp W, Y\mid Z \end{align} \end{align} $$ the $\Delta$ holds since $$\begin{align} &amp;p(X \mid W, Z, Y)=p(X \mid Y, Z)=p(X \mid W, Z)\\ &amp; \Leftrightarrow \frac{p(X, Y \mid Z)}{p(Y \mid Z)}=\frac{p(X, W \mid Z)}{p(W \mid Z)}\\ &amp; \Rightarrow \sum_W p(X, Y \mid Z)p(W \mid Z)=\sum_W p(X, W \mid Z)p(Y \mid Z)\\ &amp; \Leftrightarrow p(X, Y \mid Z)=p(X \mid Z) p(Y \mid Z)\\ &amp; \Leftrightarrow X \perp Y \mid Z \end{align}$$ </details>]]></content><author><name></name></author><category term="misc"/><category term="misc"/><summary type="html"><![CDATA[serves as a reminder for myself]]></summary></entry><entry><title type="html">A light touch on von Mise expansion and Donsker class</title><link href="https://annaguo-bios.github.io/posts/2024-01-05-functional-convergence/" rel="alternate" type="text/html" title="A light touch on von Mise expansion and Donsker class"/><published>2024-01-04T13:56:00+00:00</published><updated>2024-01-04T13:56:00+00:00</updated><id>https://annaguo-bios.github.io/posts/functional-convergence</id><content type="html" xml:base="https://annaguo-bios.github.io/posts/2024-01-05-functional-convergence/"><![CDATA[<blockquote> <p>The terms “von Mise expansion” and “Donsker” appear quite often in estimation problem. I was trying to figure out what they are and how they help with establishing the asymptotic results of statistical estimators. For this purpose, I turned to two wonderful books “‘von Mises Calculus for Statistical Functionals” by Fernholz and “Introduction to Empirical Processes and Semiparametric Inference” by Kosorok. This post is my attempted summary of some contents from those books. I also refered to the review paper by Edward H. Kennedy (2022), which offers a great overall picture of the efficiancy theory.</p> </blockquote> <h3 id="von-mise-expansion">von Mise expansion</h3> <p>A statistic can be considered as a function \(T(\cdot)\) of distribution function \(F\) as \(T(F)\), where \(T:{\mathcal{F}}\longmapsto {\mathsf{R}}\) is a mapping from a collection of distribution functions to the real line, and \(F\in\mathcal{F}\). This function \(T\) is refered to as the <em>statistical functional</em>. For example, the mean of a distribution can be considered as a statistical functional of the form \(\mu=T(F)=\int x dF(x)\)</p> <p>Statistical functional appears to be a elegant way for describing the features of statistical distributions and shred light on estimation as well. Replacing \(F\) with its <em>empirical distribution function</em> \(F_n\) yields a natural estimator \(T(F_n)\) for \(\mu\). Given an i.i.d sample \((X_1,X_2,\cdots, X_n)\) of \(F\). \(F_n\) is defined as \(\begin{align} \mathbb{F}_n(t)=n^{-1} \sum_{i=1}^n \mathbb{I}\left\{X_i \leq t\right\} \end{align}\)</p> <p>It turns out \(T(F_n)=n^{-1}\sum_{i=1}^n Xᵢ\) is the sample mean.</p> <p>Studing theoretical properties of statistical functionals yields powerful tools for establishing the asymptotic behavior of statistical estimators. To start, let’s fisrt formally define <em>statistcal functionals</em></p> <blockquote> <p>Let \(X_1, X_2,\cdots, X_n\) be an i.i.d sample from a population with distribution function \(F\). Let \(T_n=T_n(X_1,X_2,\cdots,X_n)\) be a statistic. If \(T_n\) can be written as a function of the empirical distribution function \(F_n\) as \(T_n=T(F_n)\), where \(T\) does not depend on \(n\), then \(T\) is called a <strong>statistical functional</strong>.</p> </blockquote> <p>A statistical function \(T\) is called a <em>linear</em> statistical functional if it takes the form \(\begin{align} T(F)=\int \phi(x) d F(x) \end{align}\)</p> <p>for some real valued function \(\phi(\cdot)\).</p> <p>R. von Mises (1947) developed a theory for the analysis of the asymptotic distribution of statistical functionals using a form of Taylor expansion involving the derivatives of the functionals. In particular, he observed that a statistic \(T(F_n)\) can be re-expressed as \(\begin{align} T\left(F_n\right)=T(F)+T_F^{\prime}\left(F_n-F\right)+\operatorname{Rem}\left(F_n-F\right) \end{align}\)</p> <p>Here \(T^{\prime}_F\) is the derivative of functional \(T\) at \(F\). \(\operatorname{Rem}\left(F_n-F\right)\) is the remainder term. As will be discussed shortly, \(T_F^{\prime}\left(F_n-F\right)\) is a linear statistical functional. Therefore, the central limit theorem (CLT) implies that for some finite \(\sigma²&gt;0\) \(\begin{align} \sqrt{n} \mathrm{~T}_{\mathrm{F}}^{\prime}\left(\mathrm{F}_{\mathrm{n}}-\mathrm{F}\right) \stackrel{D}{\longrightarrow} \mathrm{N}\left(0,\sigma^2\right), \end{align}\)</p> <p>where \(\stackrel{D}{\longrightarrow}\) refers to convergence in distribution.</p> <p>If it is further true (under some conditions) \(\begin{align} \sqrt{n} \operatorname{Rem}\left(\mathrm{F}_{\mathrm{n}}-\mathrm{F}\right) \xrightarrow{P} 0 , \end{align}\)</p> <p>where \(\xrightarrow{P}\) refers to convergence in probability, then by <a href="https://en.wikipedia.org/wiki/Slutsky%27s_theorem">Slutsky’s theorem</a> \(\begin{align} \sqrt{n}\left(T\left(F_n\right)-T(F)\right) \stackrel{D}{\longrightarrow} N\left(0, \sigma^2\right). \end{align}\)</p> <p>The central idea of von Mise expansion is to approximate non-linear statistical functionals by linear functionals, and therefore offering a mean for establishing asymptotic properties.</p> <p>Two questions arise (1) how is the functional derivative \(T^{\prime}_F\) defined, and how is the von Mise expansion established? (2) what conditions are needed to ensure the convergence of the remainder term? To the first question, let’s first define von Mises derivative</p> <blockquote> <p>Let \(X_1, X_2,\cdots X_n\) be an i.i.d sample. Let \(T\) be a statistical functional defined on a convex set \(\mathcal{F}\) of distribution functions, which contains all empricial distribution functions and the population distribution function \(F\). Let \(G\in\mathcal{F}\). Then the <strong>von Mises derivative</strong> \(T^{\prime}_F\) of \(T\) at \(F\) is defined by \(\begin{align} T_F^{\prime}(G-F)=\left.\frac{d}{d t} T(F+t(G-F))\right|_{t=0} \end{align}\)</p> <p>if there exists a real valued function \(\phi_F\) (independent of \(G\)) such that \(\begin{align} T_F^{\prime}(G-F)=\int \phi_F(x) d(G-F)(x) . \end{align}\)</p> </blockquote> <p>Higher order derivatives can be defined in a similar manner. The function \(\phi_F\) is uniquely defined up to an additive constant since \(d(G-F)\) has total measure zero. We shall normalize by making \(\begin{align} \int \phi_F(x) d F(x)=0 .\label{eq:ic} \end{align}\)</p> <p>Taking \(G=\delta_x\), where \(\delta_x\) is the distribution function taking point mass one at \(x\), the corresponding \(\phi_F\) is defined as the <strong>influence function</strong> or <strong>influence curve</strong> of \(T\) at \(F\). It is usually denoted as \(\begin{align} I C(x ; F, T)=\phi_F(x). \end{align}\)</p> <p>This function has played an important role in the theory of robust estimation, due to work by F. Hampel (1968, 1974) who observed that for large \(n\), \(\phi_F(x)\) measures the effect on \(T_n\) of a single additional observation with value \(x\). The influence curve also provides asymptotic variance when \(T_n\) is asymptotically normal. The properties of the influence curve are discussed at length in Hampel (1974).</p> <p>von Mise expansion is developed by applying Taylor expansion to the following function \(\begin{align} A(t)=T(F+t(G-F)),\quad t\in[0,1]. \end{align}\)</p> <p>Taylor expansion around \(t=0\) yields \(\begin{align} A(t)=A(0)+A^{\prime}(0) t+\ldots+\frac{A^{(k)}(0) t^k}{k !}+\operatorname{Rem}_k \end{align}\)</p> <p>Adopting first order expansion and evalute \(A(t)\) at \(t=1\) gives \(\begin{align} A(1)=T(G)=T(F)+T_F^{\prime}(G-F)+\operatorname{Rem}(G-F) \end{align}\)</p> <p>For \(G=F_n\), the expansion becomes \(\begin{align}\label{eq:expansion} T(F_n)&amp;=T(F)+T^{\prime}(F_n-F)+\operatorname{Rem}(F_n-F)\\\notag &amp;=T(F)+\int\phi_F(x)d(F_n-F)(x)+\operatorname{Rem}(F_n-F)\\ &amp;=T(F)+\int\phi_F(x)dF_n(x)+\operatorname{Rem}(F_n-F).\notag \end{align}\)</p> <p>The second term in the expansion is linear \(\begin{align} \int\phi_F(x)dF_n(x)=n^{-1}\sum_{i=1}^n \phi_F(X_i). \end{align}\)</p> <p>If \(E[\phi^2_F]=\sigma²&lt;\infty\), and \(\begin{align} \sqrt{n} \operatorname{Rem}\left(\mathrm{F}_{\mathrm{n}}-\mathrm{F}\right) \stackrel{\mathrm{P}}{\longrightarrow} 0,\label{eq:rem} \end{align}\)</p> <p>the CLT and Slutsky’s theorem imply that \(\begin{align} \sqrt{n}\left(T\left(F_n\right)-T(F)\right) \stackrel{D}{\longrightarrow} N\left(0, \sigma^2\right),\qquad\text{as}\quad n\rightarrow\infty. \end{align}\)</p> <p>Proceed to the second question about conditions required for \eqref{eq:rem}. Note that first-order differentiability of a statistical function $T$ in the sense of von Mise derivative does not guarantee \eqref{eq:rem} is satisfied. To ensure \eqref{eq:rem}, von Mises assumed the second-order differentiability of \(T\), which is too restrictive a condition for many functionals to satisfy. Therefore, stronger forms of differentiation, such as Frechet derivative and Hadamard (or compact) derivative, are introduced, under which it can usually be shown that \eqref{eq:rem} holds with the existence of the first derivative alone.</p> <p>Let’s first establish a general form of differentiation and then restrict this to the form we wish to use.</p> <blockquote> <p>Let \(V\) and \(W\) be topological vector spaces and let \(L(V,W)\) be the set of continuous linear transformations from \(V\) to \(W\). Let \(\mathcal{S}\) be a class of subsets of \(V\) such that every subset consisting of a single point belongs to \(\mathcal{S}\) and let \(\mathcal{A}\) be an open subset of \(V\). A function \(T:\mathcal{A}\rightarrow W\) is <strong>\(\mathcal{S}\)-differentiable</strong> at \(F\in\mathcal{A}\) if there exists \(T^{\prime}_F\in L(V,W)\) such that for any \(K\in\mathcal{S}\) \(\begin{align} \lim _{t \rightarrow 0} \frac{T(F+t H)-T(F)-T_F^{\prime}(t H)}{t}=0 \end{align}\)</p> <p>uniformly for any \(H\in K\). The linear function \(T^{\prime}_F\) is called the \(\mathcal{S}\)-derivative of \(T\) at \(F\).</p> </blockquote> <p>Here we are interested in three particular types of differentiation:</p> <ol> <li>\(\mathcal{S}\) = {bounded subsets of \(V\)}; this corresponds to <em>Frechet</em> differentiation.</li> <li>\(\mathcal{S}\) = {compact subsets of \(V\)}; this corresponds to <em>Hadamard</em> differentiation.</li> <li>\(\mathcal{S}\) = {single point subsets of \(V\)}; this corresponds to <em>Gateaux</em> differentiation.</li> </ol> <p>From the definition, it immediately follows that Frechet differentiability implies Hadamard differentiability, which in turn implies Gateaux differentiability. The latter bears a close resemblance to von Mises differentiability. For a detailed discussion of functional differentiability and its implications on asymptotic properties, please refer to Fernholz (1983).</p> <h3 id="glivenko-cantelli-class-and-donsker-class">Glivenko-Cantelli class and Donsker class</h3> <p>The last section has been discussing estimate \(T(F)\) with estimator \(T(F_n)\). The empirical distribution function has the following properties (according to <a href="https://en.wikipedia.org/wiki/Law_of_large_numbers">law of large numbers</a> and central limit theorem respectively) \(\begin{align} \mathbb{F}_n(x) \stackrel{\text { as }}{\rightarrow} F(x),\qquad x\in\mathbb{R}.\label{eq:f_as} \end{align}\)</p> <p>and \(\begin{align} G_n(x) \equiv \sqrt{n}\left[\mathbb{F}_n(x)-F(x)\right] \stackrel{D}{\longrightarrow} G(x),\qquad x\in\mathbb{R}.\label{eq:f_d} \end{align}\)</p> <p>where \(G(x)\) is some mean-zero normal random variable. Approximate \(F\) empirically brings the benefit that the second term (linear term) at the expansion \eqref{eq:expansion} converges in distribution to a mean-zero normal distribution. However, empirically estimate the distribution function can sometimes suffers from curse of dimensionality, which limits its usage in some application settings.</p> <p>Now the question is what if I want to estimate a probability distribution \(P\) using other estimators, say \(\hat{Q}\) . What asymptotic properties do the estimator \(T(\hat{Q})\) have? What conditions are needed to ensure \(T(\hat{Q})\) that makes a efficient use of the data? Given those questions, this section focuses on extending the idea of convergence from random variables to functions. Glivenko-Cantelli results extend the law of large numbers and Donsker results extend the central limit theorem.</p> <p>First let’s introduce the definition of <em>stochastic process</em> and <em>empirical process</em>.</p> <blockquote> <p>A <em>stochastic process</em> is a collection of random variables \(\left\{X_t, t \in T\right\}\) on the same probability space, indexed by an arbitrary index set \(T\). An <em>empirical process</em> is a stochastic process based on a random sample.</p> </blockquote> <p>Let \(X_1,X_2,\cdots, X_n\) be independent draws from a distribution function \(P\). Let \(\mathbb{P}_n=n^{-1} \sum_{i=1}^n \delta_{X_i}\), where \(\delta_x\) assigns mass 1 at x and 0 elsewhere. For a measurable function \(f: \mathcal{X} \mapsto \mathbb{R}\), let \(\mathbb{P}_n f=n^{-1} \sum_{i=1}^n f\left(X_i\right) .\) For any class \(\mathcal{F}\) of measurable functions \(f: \mathcal{X} \mapsto \mathbb{R}\), we can define an empirical process \(\left\{\mathbb{P}_n f, f \in \mathcal{F}\right\}\). As a special case, let \(\mathcal{F}=\{\mathbb{I}\{x \leq t\}, t \in \mathbb{R}\}\), \(F_n\) can be re-expressed as an empirical process \(\left\{\mathbb{P}_n f, f \in \mathcal{F}\right\}\).</p> <p>\(F_n\) and \(\mathbb{P}_n f\) can be considered as random functions (functions of random variables) over the associated index set. Each realization of one of these random functions is a <em>sample path</em>. To this end, Glivenko (1933) and Cantelli (1933) demonstrated that \eqref{eq:f_as} could be strengthened to \(\begin{align} \sup _{t \in \mathbb{R}}\left|\mathbb{F}_n(t)-F(t)\right| \stackrel{\text { as }}{\rightarrow} 0 . \end{align}\) Another way of saying this is that the sample paths of \(F_n\) get uniformly closer to \(F\) as \(n\rightarrow \infty\). More generally, a class \(\mathcal{F}\) of measurable functions \(f: \mathcal{X} \mapsto \mathbb{R}\) is said to be a <strong>P-Glivenko-Cantelli</strong> class if \(\begin{align} \sup _{f \in \mathcal{F}}\left|\mathbb{P}_n f-P f\right| \stackrel{\text { as* }}{\longrightarrow} 0. \end{align}\) Returning to \(F_n\), we know by central limit theorem that \eqref{eq:f_d} holds. Donsker (1952) generalized this convergence result from vector of random variables to sample paths of stochastic processes. A class \(\mathcal{F}\) of measurable functions \(f: \mathcal{X} \mapsto \mathbb{R}\) is called a <strong>P-Donsker</strong> class if \(\begin{align} \left\{\sqrt{n}\left(P_n-P\right) f\right\}_{f \in \mathcal{F}}\stackrel{D} {\longrightarrow} G, \end{align}\)</p> <p>where \(G\) is a gaussian process indexed by \(\mathcal{F}\). In particular, \(\begin{align} \left(\sqrt{n}\left(P_n-P\right) f_1, \cdots, \sqrt{n}\left(P_n-P\right) f_k\right) \rightarrow\left(G_{f_1}, \ldots, G_{f_k}\right) \end{align}\) and \(\begin{align} \operatorname{cov}\left(G_{f_i}, G_{f_j}\right)=\operatorname{cov}\left(f_i(X), f_j(X)\right), \end{align}\) for \(fᵢ\in \mathcal{F}, i=1,2,\cdots, k\) and \(X\sim P\).</p> <p>To introduce the theorems establishing conditions needed for \(\mathcal{F}\) to be a P-Glivenko-Cantelli class or Donsker class, let’s first introduce some definitions.</p> <p>For \(1\geq r&lt;\infty\), let \(L_r(P)\) denotes the collection of functions \(g: \mathcal{X} \mapsto \mathbb{R}\) such that \(\|g\|_{r, P} \equiv\left[\int_{\mathcal{X}}|g(x)|^r d P(x)\right]^{1 / r}&lt;\infty .\)</p> <ul> <li>A \(\epsilon\)-bracket in \(L_r(P)\) is a pair of functions \(l, u \in L_r(P)\) with \(P(l(X)&lt;u(X))=1\) and \(\|l-u\|_{r, P} \leq \epsilon\).</li> <li>A function \(f\in\mathcal{F}\) lies in the bracket \(l,u\) if \(\mathrm{P}\{l(X) \leq f(X) \leq u(X)\}=1\).</li> <li>The bracketing number \(N_{[]}\left(\epsilon, \mathcal{F}, L_r(P)\right)\) is the minimum number of \(\epsilon\)-brackets needed to ensure that every \(f\in\mathcal{F}\) lies in at least one of the brackets.</li> <li>The bracketing integral is defined as</li> </ul> \[\begin{align} J_{[]}\left(\delta, \mathcal{F}, L_r(P)\right) \equiv \int_0^\delta \sqrt{\log N_{[]}\left(\epsilon, \mathcal{F}, L_r(P)\right)} d \epsilon. \end{align}\] <p><strong>Theorem 1</strong> Let \(\mathcal{F}\) be a class of measureable functions. \(\mathcal{F}\) is P-Glivenko-Cantelli if \(N_{[]}\left(\epsilon, \mathcal{F}, L_r(P)\right)&lt;\infty\) for every \(\epsilon&gt;0\).</p> <p><strong>Theorem 2</strong> Let \(\mathcal{F}\) be a class of measureable functions. \(\mathcal{F}\) is P-Donsker if \(J_{[]}\left(\delta, \mathcal{F}, L_2(P)\right)&lt;\infty.\)</p> <p>Now returning to our initial question, if I’d like to estimate \(P\) by \(\hat{Q}\), the von Mise expansion of \(T(P)\) at \(\hat{Q}\) yields \(\begin{align} T(P)=T(\hat{Q})+\int\phi_{\hat{Q}}dP+\operatorname{Rem}(P-\hat{Q}). \end{align}\)</p> <p>Let \(Pf\equiv\int f dP\), we can rewrite it as \(\begin{align} T(\hat{Q})-T(P)= P_n \phi_P-P_n \phi_{\hat{Q}}+\left(P_n-P\right)\{\phi_{\hat{Q}}-\phi_{P}\}+\operatorname{Rem}(\hat{Q}-P). \end{align}\)</p> <p>Here \(\phi_P\) is introduced using the property of the influence curve as in \eqref{eq:ic}. The first term (\(P_n \phi_P\)) is a sample average of mean zero i.i.d. terms and thus enjoys standard \(n^{1/2}\) asymptotic behavior. The third term converges to a gaussian process if \(\{\phi_{\hat{Q}}-\phi_{P}\}\) is P-Donsker. If the second term (\(P_n \phi_{\hat{Q}}\)) also exihibts \(n^{1/2}\) asymptotic behavior (as is the case with <a href="https://link.springer.com/book/10.1007/978-1-4419-9782-1">TMLE estimators</a> ), then the estimator \(T(\hat{Q})\) has only a second-order bias quantified by the remainder term \(\operatorname{Rem}(\hat{Q}-P).\)</p> <h4 id="references">References</h4> <ol> <li>Fernholz, Luisa Turrin. <em>Von Mises calculus for statistical functionals</em>. Vol. 19. Springer Science &amp; Business Media, 2012.</li> <li>Kosorok, Michael R. <em>Introduction to empirical processes and semiparametric inference</em>. Vol. 61. New York: Springer, 2008.</li> <li>Kennedy, Edward H. “Semiparametric doubly robust targeted double machine learning: a review.” <em>arXiv preprint arXiv:2203.06469</em> (2022).</li> <li>Lecture notes of <a href="https://zhangxiany-tamu.github.io/downloads/620sp22/Apr-14.pdf">STAT 620</a> by Xianyang Zhang.</li> <li>Lecture notes of <a href="https://faculty.washington.edu/yenchic/20A_stat512/Lec10_functional.pdf">STAT 512: Statistical Inference</a> by Yen-Chi Chen.</li> </ol>]]></content><author><name></name></author><category term="learning"/><category term="learning"/><summary type="html"><![CDATA[a reading note (attempted summary) of Fernholz (1983) and Kosorok (2008)]]></summary></entry><entry><title type="html">Submit parallel jobs on HPC</title><link href="https://annaguo-bios.github.io/posts/2023-09-01-parallel-job/" rel="alternate" type="text/html" title="Submit parallel jobs on HPC"/><published>2023-09-01T13:56:00+00:00</published><updated>2023-09-01T13:56:00+00:00</updated><id>https://annaguo-bios.github.io/posts/parallel-job</id><content type="html" xml:base="https://annaguo-bios.github.io/posts/2023-09-01-parallel-job/"><![CDATA[<blockquote> <p>The workflow discussed in this post is particularly suited for scenarios in which you need to execute similar code multiple times, with each execution having a substantial time requirement. In each iteration, the code exhibits minor variations in specific input parameters. Then this is when the <em>parallel</em> computing comes into play.</p> </blockquote> <p><strong>Toy Task:</strong> Suppose I’d like to numerically evaluate the central limit theorem.</p> <p><u>Central Limit Theorem</u>: suppose \(\{X_1,X_2,\dots,X_n\}\) is a sequence of i.i.d. random variables with \(E(X_i)=\mu\) and \(Var(X_i)=\sigma^2 &lt;\infty\) then as \(n\rightarrow\infty\), \(\bar{X}\rightarrow N(\mu,\frac{\sigma^2}{n})\)</p> <h3 id="write-a-r-function-that-perform-the-task">Write a R function that perform the task</h3> <p>Create a R script, named <code class="language-plaintext highlighter-rouge">task.R</code> that simulate \(X\) with my specified sample size and seed, and output the sample mean of the simulated \(X\) values.</p> <p>The following code takes two command-line arguments <code class="language-plaintext highlighter-rouge">n</code> and <code class="language-plaintext highlighter-rouge">seed</code> and output the sample mean to a Rdata file.</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">args</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">commandArgs</span><span class="p">(</span><span class="n">trailingOnly</span><span class="o">=</span><span class="nb">T</span><span class="p">)</span><span class="w">
</span><span class="n">n</span><span class="o">=</span><span class="n">args</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w">
</span><span class="n">seed</span><span class="o">=</span><span class="n">args</span><span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="w">

</span><span class="n">set.seed</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span><span class="w">

</span><span class="c1"># generate data</span><span class="w">
</span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">)</span><span class="w">

</span><span class="c1"># sample mean of X</span><span class="w">
</span><span class="n">E.x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w">

</span><span class="c1"># save the output</span><span class="w">
</span><span class="n">save</span><span class="p">(</span><span class="n">list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"E.x"</span><span class="p">),</span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"output_"</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="s2">"_"</span><span class="p">,</span><span class="n">seed</span><span class="p">,</span><span class="s2">".Rdata"</span><span class="p">))</span><span class="w">
</span></code></pre></div></div> <p><strong>Note:</strong>* How to create the <em>task.R</em> file in linux?</p> <ul> <li>Create a file named <em>task.R</em> with the following code</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim task.R
</code></pre></div></div> <ul> <li>type <code class="language-plaintext highlighter-rouge">i</code> to enter the insert mode, and paste the above code.</li> <li>press <code class="language-plaintext highlighter-rouge">Esc</code> to exit the insert mode, and type <code class="language-plaintext highlighter-rouge">:wq</code> to save and quit</li> </ul> <p>Upon creating the <code class="language-plaintext highlighter-rouge">task.R</code> file, we currently have one file in folder</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/paralleljobs/task-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/paralleljobs/task-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/paralleljobs/task-1400.webp"/> <img src="/assets/img/paralleljobs/task.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>To test the code, let \(n=100\) and \(seed=10\). Run the following code:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># load R</span>
module load R

<span class="c"># run the job</span>
Rscript task.R 100 10
</code></pre></div></div> <p>It will produce a file named <code class="language-plaintext highlighter-rouge">output_100_10.Rdata</code> . Now we have two files in folder</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/paralleljobs/test_task-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/paralleljobs/test_task-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/paralleljobs/test_task-1400.webp"/> <img src="/assets/img/paralleljobs/test_task.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="generate-the-jobs">Generate the jobs</h3> <p>We want to execute the <code class="language-plaintext highlighter-rouge">task.R</code> script for different sample sizes: 250, 500, 1000, 2000, and 4000. For each sample size, we intend to run <code class="language-plaintext highlighter-rouge">task.R</code> 1000 times by setting seeds from 1 to 1000.</p> <p>For computational efficiency, we aim to run the \(5\times 1000\) jobs in <strong>parallel</strong>. To achieve this, first create a <code class="language-plaintext highlighter-rouge">.txt</code> file that contains all the jobs with the following R code. For reproducibility, I’d like to write the following code in a file called <code class="language-plaintext highlighter-rouge">write_job.R</code>. We now have three files in folder</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/paralleljobs/writejob-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/paralleljobs/writejob-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/paralleljobs/writejob-1400.webp"/> <img src="/assets/img/paralleljobs/writejob.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># sample size</span><span class="w">
</span><span class="n">n.vec</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">250</span><span class="p">,</span><span class="m">500</span><span class="p">,</span><span class="m">1000</span><span class="p">,</span><span class="m">2000</span><span class="p">,</span><span class="w"> </span><span class="m">4000</span><span class="p">)</span><span class="w">

</span><span class="c1"># number of simulations</span><span class="w">
</span><span class="n">nsim</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1000</span><span class="w">

</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">seq_along</span><span class="p">(</span><span class="n">n.vec</span><span class="p">)){</span><span class="w">
  </span><span class="n">joblist</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">()</span><span class="w">
  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">t</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">nsim</span><span class="p">){</span><span class="w">
    </span><span class="n">job</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"Rscript task.R "</span><span class="p">,</span><span class="n">n.vec</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="s2">" "</span><span class="p">,</span><span class="n">t</span><span class="p">)</span><span class="w">
    </span><span class="n">joblist</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">joblist</span><span class="p">,</span><span class="n">job</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="n">write.table</span><span class="p">(</span><span class="n">joblist</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"joblist_n"</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="s2">".txt"</span><span class="p">),</span><span class="n">quote</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">F</span><span class="p">,</span><span class="w"> </span><span class="n">col.names</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">F</span><span class="p">,</span><span class="w"> </span><span class="n">row.names</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">F</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Usually, we don’t want to submit too many jobs at a time, so I split the jobs into 5 files, named <em>joblist_n250.txt, joblist_n500.txt, joblist_n1000.txt, joblist_n2000.txt, joblist_n4000.txt</em>.</p> <p>To generate those <code class="language-plaintext highlighter-rouge">.txt</code> files, type <code class="language-plaintext highlighter-rouge">Rscript write_job.R</code> in the terminal, which will execute the R code contained in the <code class="language-plaintext highlighter-rouge">write_job.R</code> file.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/paralleljobs/generate_job-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/paralleljobs/generate_job-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/paralleljobs/generate_job-1400.webp"/> <img src="/assets/img/paralleljobs/generate_job.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="submit-parallel-jobs">Submit parallel jobs</h3> <p>Personally I prefer to submit parallel jobs with the help of <a href="https://github.com/ycrc/dSQ">dSQ</a> command.</p> <ul> <li>download dSQ (you will need to install git command first if it’s not already installed).</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Download dSQ</span>
git clone https://github.com/ycrc/dSQ

<span class="c"># Define the path to the dSQ folder</span>
<span class="nv">dsq_path</span><span class="o">=</span><span class="s2">"/path/to/my/dSQdirectory"</span>
</code></pre></div></div> <ul> <li>Generate bash jobs</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module load python/3.8
module load R/4.2.2
<span class="c">##########################</span>
<span class="c"># This is step1_dsq.sh</span>
<span class="c">##########################</span>
<span class="k">for </span>i <span class="k">in</span> <span class="si">$(</span><span class="nb">seq </span>1 5<span class="si">)</span><span class="p">;</span> <span class="k">do
</span>python <span class="s2">"</span><span class="nv">$dsq_path</span><span class="s2">/dSQ.py"</span> <span class="nt">--job-file</span> joblist_n<span class="nv">$i</span>.txt <span class="nt">--batch-file</span> joblist_n<span class="nv">$i</span>.sh <span class="nt">--job-name</span> n<span class="nv">$i</span> <span class="nt">--mail-type</span> ALL
<span class="k">done</span>
</code></pre></div></div> <ul> <li>Modify the bash jobs to contain email and partition information. Change the partition name as need. I’m using the <code class="language-plaintext highlighter-rouge">day-long-cpu</code> partition here.</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">##########################</span>
<span class="c"># This is step2_modify.sh</span>
<span class="c">##########################</span>

<span class="k">for </span>i <span class="k">in</span> <span class="si">$(</span><span class="nb">seq </span>1 5<span class="si">)</span><span class="p">;</span> <span class="k">do</span>
<span class="c"># add "python" at the last line</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s@'</span><span class="s2">"</span><span class="nv">$dsq_path</span><span class="s2">"</span><span class="s1">'/dSQBatch.py@python '</span><span class="s2">"</span><span class="nv">$dsq_path</span><span class="s2">"</span><span class="s1">'/dSQBatch.py@'</span> <span class="s2">"joblist_n</span><span class="nv">$i</span><span class="s2">.sh"</span>

<span class="c"># add email and packages</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'/#SBATCH --mail-type "ALL"/a #SBATCH --mail-user=your-email@xxx.edu\nmodule load python/3.8\nmodule load R/4.2.2'</span> joblist_n<span class="nv">$i</span>.sh

<span class="c"># specify partition name</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'1a #SBATCH --partition=day-long-cpu'</span> joblist_n<span class="nv">$i</span>.sh
<span class="k">done</span>

</code></pre></div></div> <p>Upon this step, we should have the following files in folder</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/paralleljobs/shfile-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/paralleljobs/shfile-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/paralleljobs/shfile-1400.webp"/> <img src="/assets/img/paralleljobs/shfile.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ul> <li>submit the jobs one by one, so we don’t abuse the cluster:)</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sbatch joblist_n1.sh
</code></pre></div></div> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/paralleljobs/submit_job-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/paralleljobs/submit_job-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/paralleljobs/submit_job-1400.webp"/> <img src="/assets/img/paralleljobs/submit_job.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The above screenshot shows that we have successfully submitted the bash job <code class="language-plaintext highlighter-rouge">joblist_n1.sh</code> and the submission id is <code class="language-plaintext highlighter-rouge">19998977</code>. <code class="language-plaintext highlighter-rouge">squeue -j 19998977</code> helps check the current status of this job, and the <code class="language-plaintext highlighter-rouge">PD</code> in the <code class="language-plaintext highlighter-rouge">ST</code> means the jobs are queued and awaiting execution; they have not commenced running yet.</p> <p>if we want to submit all the jobs at once:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">##########################</span>
<span class="c"># This is step3_submit.sh</span>
<span class="c">##########################</span>
<span class="k">for </span>i <span class="k">in</span> <span class="si">$(</span><span class="nb">seq </span>1 5<span class="si">)</span><span class="p">;</span> <span class="k">do
  </span>sbatch joblist_n<span class="nv">$i</span>.sh
<span class="k">done</span>
</code></pre></div></div> <h3 id="check-job-status-using-squeue">Check job status using <code class="language-plaintext highlighter-rouge">squeue</code></h3> <p>Upon submitting parallel jobs, we can check the job status with the <strong>squeue</strong> command.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>squeue <span class="c"># return status of all jobs of all users</span>
</code></pre></div></div> <p>Running the <code class="language-plaintext highlighter-rouge">squeue</code> command alone will display the status of all pending and running jobs across the entire cluster for all users. This provides an overview of the cluster’s current workload. By examining the output, you can get an idea of how many users have submitted jobs and how many of those jobs are actively running or waiting in the queue.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>squeue <span class="nt">--job</span> &lt;your_job_number&gt; <span class="c"># return status of jobs under &lt;your_job_number&gt;</span>
squeue <span class="nt">-u</span> &lt;your_user_name&gt; <span class="c"># return status of jobs under &lt;your_user_name&gt;</span>
</code></pre></div></div> <p>To narrow down the results returned by the <code class="language-plaintext highlighter-rouge">squeue</code> command and focus on specific jobs or jobs belonging to your user account, you can use the <code class="language-plaintext highlighter-rouge">--job</code> and <code class="language-plaintext highlighter-rouge">-u</code> options respectively.</p> <p>All the above commands will return the status of jobs via job state codes. The table below summarizes the different status codes displayed by the <code class="language-plaintext highlighter-rouge">squeue</code> command and their corresponding meanings. (<a href="https://curc.readthedocs.io/en/latest/running-jobs/squeue-status-codes.html">table source</a>)</p> <table> <thead> <tr> <th>Status</th> <th style="text-align: center">Code</th> <th>Explaination</th> </tr> </thead> <tbody> <tr> <td>COMPLETED</td> <td style="text-align: center"><code class="language-plaintext highlighter-rouge">CD</code></td> <td>The job has completed successfully.</td> </tr> <tr> <td>COMPLETING</td> <td style="text-align: center"><code class="language-plaintext highlighter-rouge">CG</code></td> <td>The job is finishing but some processes are still active.</td> </tr> <tr> <td>FAILED</td> <td style="text-align: center"><code class="language-plaintext highlighter-rouge">F</code></td> <td>The job terminated with a non-zero exit code and failed to execute.</td> </tr> <tr> <td>PENDING</td> <td style="text-align: center"><code class="language-plaintext highlighter-rouge">PD</code></td> <td>The job is waiting for resource allocation. It will eventually run.</td> </tr> <tr> <td>PREEMPTED</td> <td style="text-align: center"><code class="language-plaintext highlighter-rouge">PR</code></td> <td>The job was terminated because of preemption by another job.</td> </tr> <tr> <td>RUNNING</td> <td style="text-align: center"><code class="language-plaintext highlighter-rouge">R</code></td> <td>The job currently is allocated to a node and is running.</td> </tr> <tr> <td>SUSPENDED</td> <td style="text-align: center"><code class="language-plaintext highlighter-rouge">S</code></td> <td>A running job has been stopped with its cores released to other jobs.</td> </tr> <tr> <td>STOPPED</td> <td style="text-align: center"><code class="language-plaintext highlighter-rouge">ST</code></td> <td>A running job has been stopped with its cores retained.</td> </tr> </tbody> </table> <p>To obtain more detailed job status information and monitor the progress of jobs more effectively. Here are some additional options:</p> <ol> <li><strong><code class="language-plaintext highlighter-rouge">--long</code></strong>: This option provides more detailed job status information beyond the basic fields.</li> <li><strong><code class="language-plaintext highlighter-rouge">--start</code></strong>: When used with this option, <code class="language-plaintext highlighter-rouge">squeue</code> will return the estimated start time for pending jobs. This estimation is based on the current workload and resource availability in the cluster. Note that this estimation can be inaccurate, as new jobs with higher priorities or changes in resource availability can affect the actual start time of a pending job.</li> <li><strong><code class="language-plaintext highlighter-rouge">--iterate=</code></strong>: This option allows you to automatically refresh the job status information every specified number of seconds. This feature is useful for monitoring job progress without manually re-running the command. To stop the automatic iteration, simply press <code class="language-plaintext highlighter-rouge">Ctrl+C</code>.</li> </ol> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>squeue <span class="nt">--job</span> &lt;your_job_number&gt; <span class="nt">--long</span> <span class="c"># return more detailed status info</span>
squeue <span class="nt">-u</span> &lt;your_user_name&gt; <span class="nt">--start</span> <span class="c"># return an estimated start time</span>
squeue <span class="nt">-u</span> &lt;your_user_name&gt; <span class="nt">--start</span> <span class="nt">--iterate</span><span class="o">=</span>&lt;n_seconds&gt; <span class="c"># return an estimated start time every n_seconds</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">squeue</code> command has way more options than I can introduce here. The command below allows us to check all the options that <code class="language-plaintext highlighter-rouge">squeue</code> has to offer. It will open a help page that contains all the <code class="language-plaintext highlighter-rouge">squeue </code> options along with detailed explantation. Press <code class="language-plaintext highlighter-rouge">q</code> to exit this help page.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>man squeue <span class="c"># check all options of squeue command</span>
</code></pre></div></div> <h3 id="cancel-jobs-using-scancel">Cancel jobs using <code class="language-plaintext highlighter-rouge">scancel</code></h3> <p>Sometimes we may want to cancel the submitted jobs. <code class="language-plaintext highlighter-rouge">scancel</code> is designed for this purpose and its usage is very similar to <code class="language-plaintext highlighter-rouge">squeue</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scancel &lt;your_job_number&gt; <span class="c"># cancel certain job</span>
scancel &lt;your_job_number1&gt;, &lt;your_job_number2&gt;, &lt;your_job_number3&gt; <span class="c"># cancel multiple jobs</span>
scancel <span class="nt">-u</span> &lt;your_user_name&gt; <span class="c"># cancel all jobs from certain user</span>
</code></pre></div></div> <h3 id="control-queued-and-running-jobs-using-scontrol">Control queued and running jobs using <code class="language-plaintext highlighter-rouge">scontrol</code></h3> <p>To suspend a currently running job, we can use the <code class="language-plaintext highlighter-rouge">suspend</code> command.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scontrol <span class="nb">suspend</span> &lt;your_job_number&gt;
</code></pre></div></div> <p>This will pause the currently running job and we can resume the job with <code class="language-plaintext highlighter-rouge">resume</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scontrol resume &lt;your_job_number&gt;
</code></pre></div></div> <p>To hold a job that is queued but not yet running, we can use the <code class="language-plaintext highlighter-rouge">hold</code> command</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scontrol hold &lt;your_job_number&gt;
</code></pre></div></div> <p>Different from <code class="language-plaintext highlighter-rouge">suspend</code>, this <code class="language-plaintext highlighter-rouge">hold</code> command can only be applied to jobs that is currently waiting in line and not run yet. Using the <code class="language-plaintext highlighter-rouge">hold</code> command will assign lowest priority to the job such that other jobs can be run first. To cancel this holding status, we can use the <code class="language-plaintext highlighter-rouge">release</code> command.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scontrol release &lt;your_job_number&gt;
</code></pre></div></div> <h3 id="organize-the-results">Organize the results</h3> <p>Finally, we are ready to organize the results. This step varies based on your task. In this toy example, we’d like to verify: \(\sqrt{n}(\bar{X}-0)\rightarrow N(0,1)\) Therefore, I’ll plot the kernel density estimate of \(\bar{X}\) for each sample size, and compare them with the standard normal distribution \(N(0,1)\)</p> <p>The following R code does the job.</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">latex2exp</span><span class="p">)</span><span class="w">

</span><span class="c1"># sample size</span><span class="w">
</span><span class="n">n.vec</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">250</span><span class="p">,</span><span class="m">500</span><span class="p">,</span><span class="m">1000</span><span class="p">,</span><span class="m">2000</span><span class="p">,</span><span class="m">4000</span><span class="p">)</span><span class="w">

</span><span class="c1"># number of simulations</span><span class="w">
</span><span class="n">nsim</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1000</span><span class="w">

</span><span class="c1"># record results  </span><span class="w">
</span><span class="n">mean_matrix</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nsim</span><span class="p">,</span><span class="w"> </span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">n.vec</span><span class="p">))</span><span class="w">

</span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">seq_along</span><span class="p">(</span><span class="n">n.vec</span><span class="p">)){</span><span class="w">
  
  </span><span class="c1"># sample size</span><span class="w">
  </span><span class="n">n</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">n.vec</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w">
  
  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">t</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">nsim</span><span class="p">){</span><span class="w">
 
    </span><span class="n">load</span><span class="p">(</span><span class="n">paste0</span><span class="p">(</span><span class="s2">"output_"</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="s2">"_"</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="s2">".Rdata"</span><span class="p">))</span><span class="w">
    
    </span><span class="c1"># record bias</span><span class="w">
    </span><span class="n">mean_matrix</span><span class="p">[</span><span class="n">t</span><span class="p">,</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">E.x</span><span class="w">
    
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">

</span><span class="c1"># plot the result with boxplot</span><span class="w">
</span><span class="n">dt</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="nf">rep</span><span class="p">(</span><span class="n">n.vec</span><span class="p">,</span><span class="w"> </span><span class="n">each</span><span class="o">=</span><span class="n">nsim</span><span class="p">),</span><span class="w"> </span><span class="n">value</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="n">mean_matrix</span><span class="p">))</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> </span><span class="n">mutate</span><span class="p">(</span><span class="n">n.value</span><span class="o">=</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">*</span><span class="n">value</span><span class="p">)</span><span class="w">

</span><span class="c1">######################</span><span class="w">
  </span><span class="c1"># density plot</span><span class="w">
</span><span class="c1">######################</span><span class="w">
  
  </span><span class="n">p.den</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">dt</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">n.value</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="o">=</span><span class="n">factor</span><span class="p">(</span><span class="n">n</span><span class="p">)))</span><span class="w"> </span><span class="o">+</span><span class="w"> 
    </span><span class="n">geom_density</span><span class="p">(</span><span class="n">key_glyph</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">draw_key_path</span><span class="p">)</span><span class="o">+</span><span class="w">
    </span><span class="n">theme_bw</span><span class="p">()</span><span class="o">+</span><span class="w">
    </span><span class="n">xlab</span><span class="p">(</span><span class="n">TeX</span><span class="p">(</span><span class="n">r</span><span class="s1">'($\sqrt{n}E(X)$)'</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w"> 
    </span><span class="n">ylab</span><span class="p">(</span><span class="s2">"Density"</span><span class="p">)</span><span class="o">+</span><span class="w">
    </span><span class="n">theme</span><span class="p">(</span><span class="n">legend.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">.95</span><span class="p">,</span><span class="w"> </span><span class="m">.95</span><span class="p">),</span><span class="w">
          </span><span class="n">legend.justification</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"right"</span><span class="p">,</span><span class="w"> </span><span class="s2">"top"</span><span class="p">))</span><span class="o">+</span><span class="w">
    </span><span class="n">guides</span><span class="p">(</span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">guide_legend</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Sample size"</span><span class="p">))</span><span class="w">
  

  </span><span class="c1"># Overlay a single normal curve</span><span class="w">
  </span><span class="n">p.den</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">p.den</span><span class="w"> </span><span class="o">+</span><span class="w">
    </span><span class="n">stat_function</span><span class="p">(</span><span class="w">
      </span><span class="n">fun</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">dnorm</span><span class="p">,</span><span class="w">
      </span><span class="n">args</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">mean</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">sd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="w">
      </span><span class="n">linetype</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dashed"</span><span class="p">,</span><span class="w">
      </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">,</span><span class="w">
      </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="w">
    </span><span class="p">)</span><span class="w">

</span><span class="c1"># Save the ggplot visualization to a PNG file</span><span class="w">
</span><span class="n">ggsave</span><span class="p">(</span><span class="n">filename</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"dens_plot.png"</span><span class="p">,</span><span class="w"> </span><span class="n">plot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">p.den</span><span class="p">,</span><span class="w"> </span><span class="n">device</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"png"</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">6</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="n">dpi</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">300</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p>The resulting plot:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/paralleljobs/dens_plot-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/paralleljobs/dens_plot-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/paralleljobs/dens_plot-1400.webp"/> <img src="/assets/img/paralleljobs/dens_plot.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="references">References</h3> <ol> <li><a href="https://curc.readthedocs.io/en/latest/running-jobs/slurm-commands.html">Useful Slurm commands</a></li> <li><a href="https://curc.readthedocs.io/en/latest/running-jobs/squeue-status-codes.html"><code class="language-plaintext highlighter-rouge">squeue</code> status and reason codes</a></li> <li><a href="https://it.stonybrook.edu/help/kb/checking-the-status-of-a-slurm-job">Checking the Status of a SLURM Job</a></li> </ol>]]></content><author><name></name></author><category term="code"/><category term="code"/><summary type="html"><![CDATA[a hands-on tutorial]]></summary></entry></feed>